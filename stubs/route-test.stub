<?php

namespace Tests\Route;

use Illuminate\Http\Response;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Str;
use SnakeInk\Crude\Abstracts\RouteTestCase;
use App\Models\{{Model}};

class DummyClass extends RouteTestCase
{
    use RefreshDatabase;

    // Regular tests

    public function testNo{{ModelPlural}}Exist()
    {
        $response = $this->actingAs($this->genericUser)->call(
            method: 'GET',
            uri: route('{{kebab-case-model-plural}}.index'),
        );

        $response->assertStatus(Response::HTTP_NO_CONTENT);
    }

    public function testAll{{ModelPlural}}CanBeListed()
    {
        $createdResources = {{Model}}::factory()->count(7)->create();

        $response = $this->actingAs($this->genericUser)->call(
            method: 'GET',
            uri: route('{{kebab-case-model-plural}}.index'),
        );

        $response->assertStatus(Response::HTTP_OK);

        $this->assertEquals(
            expected: $createdResources->toArray(),
            actual: $response->original['resources']->toArray()
        );
    }

    public function test{{Model}}CanBeShown()
    {
        ${{model}} = {{Model}}::factory()->create();

        $response = $this->actingAs($this->genericUser)->call(
            method: 'GET',
            uri: route('{{kebab-case-model-plural}}.show', ['id' => ${{model}}->id])
        );

        $response->assertStatus(Response::HTTP_OK);

        $this->assertEquals(
            expected: ${{model}}->toArray(),
            actual: $response->original['resources']->toArray()
        );
    }

    public function test{{Model}}CanBeCreated()
    {
        $response = $this->actingAs($this->genericUser)->call(
            method: 'POST',
            uri: route('{{kebab-case-model-plural}}.store'),
            parameters: {{Model}}::factory()->make()->toArray()
        );

        $response->assertStatus(Response::HTTP_CREATED);

        $this->assertModelExists($response->original['resources']);
    }

    public function test{{Model}}CanBeUpdated()
    {
        ${{model}} = {{Model}}::factory()->create();

        $updateData = {{Model}}::factory()->make()->toArray();

        $response = $this->actingAs($this->genericUser)->call(
            method: 'PUT',
            uri: route('{{kebab-case-model-plural}}.update', ['id' => ${{model}}->id]),
            parameters: $updateData
        );

        $response->assertStatus(Response::HTTP_OK);

        $this->assertEquals(
            expected: ${{model}}->fresh()->toArray(),
            actual: $response->original['resources']->toArray()
        );
    }

    public function test{{Model}}CanBeDeleted()
    {
        ${{model}} = {{Model}}::factory()->create();

        $response = $this->actingAs($this->genericUser)->call(
            method: 'DELETE',
            uri: route('{{kebab-case-model-plural}}.destroy', ['id' => ${{model}}->id]),
        );

        $response->assertStatus(Response::HTTP_NO_CONTENT);

        $this->assertModelMissing(${{model}});
    }
}
